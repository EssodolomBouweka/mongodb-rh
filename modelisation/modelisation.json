//Collection departements 
{
  "_id": ObjectId("..."),
  "nom": "Informatique",
  "description": "Gère les systèmes et le support IT",
  "chef_dept": {
    "nom": "Afi Kossi",
    "email": "afi.kossi@entreprise.tg"
  }
}

// Collection postes

{
  "_id": ObjectId("..."),
  "intitule": "Développeur Full Stack",
  "salaire_min": 500000,
  "salaire_max": 900000,
  "description": "Conçoit et développe des applications web"
}

// Collection employes

{
  "_id": ObjectId("..."),
  "nom": "Essodolom Bouweka",
  "email": "essodolom.bouweka@entreprise.tg",
  "date_embauche": "2022-03-15",
  "poste_id": ObjectId("..."),
  "departement_id": ObjectId("..."),
  "competences": ["Python", "MongoDB", "Power BI"],
  "contrat": {
    "type": "CDI",
    "salaire": 800000,
    "date_debut": "2022-03-15"
  }
}




//Collection departement
//  Nous y avons utilisé de l'Embedding 

// Pourquoi ?

// Le champ chef_dept contient un sous-document (nom, email) directement imbriqué dans le document departement.

//on n’a pas utilisé d’identifiant (ObjectId) de référence pointant vers une autre collection, ce qui serait le cas avec le referencing.

// Pourquoi ce choix est pertinent ici ?

// Les données du chef de département sont faiblement réutilisables ailleurs.

// Elles sont intrinsèquement liées au département (le chef est propre à un seul département).

// Pas besoin de faire des jointures coûteuses avec $lookup.



//Collection postes
// Nous y avons utilisé du Referencing 

// Pourquoi ?
// Les champs poste_id et departement_id contiennent des identifiants UUID (ou ObjectId) pointant vers d'autres collections : postes, departements

//Ces identifiants ne sont pas des sous-documents, donc les données du poste ou du département ne sont pas directement incluses dans le document employé.

// Raisons pour lesquelles le referencing est pertinent ici :

// Réutilisabilité :	Plusieurs employés peuvent partager le même poste ou département.
// Évite la duplication	Pas besoin de répéter les mêmes infos de poste ou de service dans chaque employé.
// Requêtes combinées : On peux facilement faire un $lookup pour récupérer les données liées.


